/*
 * This file is generated by jOOQ.
 */
package br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables;


import br.com.itarocha.chb.adapter.out.persistence.jooq.data.DefaultSchema;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Keys;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.QuartoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Quarto extends TableImpl<QuartoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>quarto</code>
     */
    public static final Quarto QUARTO = new Quarto();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuartoRecord> getRecordType() {
        return QuartoRecord.class;
    }

    /**
     * The column <code>quarto.id</code>.
     */
    public final TableField<QuartoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>quarto.ativo</code>.
     */
    public final TableField<QuartoRecord, String> ATIVO = createField(DSL.name("ativo"), SQLDataType.VARCHAR(1).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>quarto.descricao</code>.
     */
    public final TableField<QuartoRecord, String> DESCRICAO = createField(DSL.name("descricao"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>quarto.numero</code>.
     */
    public final TableField<QuartoRecord, Integer> NUMERO = createField(DSL.name("numero"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>quarto.created_at</code>.
     */
    public final TableField<QuartoRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>quarto.updated_at</code>.
     */
    public final TableField<QuartoRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>quarto.created_by</code>.
     */
    public final TableField<QuartoRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>quarto.updated_by</code>.
     */
    public final TableField<QuartoRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    private Quarto(Name alias, Table<QuartoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Quarto(Name alias, Table<QuartoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>quarto</code> table reference
     */
    public Quarto(String alias) {
        this(DSL.name(alias), QUARTO);
    }

    /**
     * Create an aliased <code>quarto</code> table reference
     */
    public Quarto(Name alias) {
        this(alias, QUARTO);
    }

    /**
     * Create a <code>quarto</code> table reference
     */
    public Quarto() {
        this(DSL.name("quarto"), null);
    }

    public <O extends Record> Quarto(Table<O> child, ForeignKey<O, QuartoRecord> key) {
        super(child, key, QUARTO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<QuartoRecord, Long> getIdentity() {
        return (Identity<QuartoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<QuartoRecord> getPrimaryKey() {
        return Keys.KEY_QUARTO_PRIMARY;
    }

    @Override
    public List<UniqueKey<QuartoRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_QUARTO_QUARTO_UN02, Keys.KEY_QUARTO_QUARTO_UN01);
    }

    @Override
    public Quarto as(String alias) {
        return new Quarto(DSL.name(alias), this);
    }

    @Override
    public Quarto as(Name alias) {
        return new Quarto(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Quarto rename(String name) {
        return new Quarto(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quarto rename(Name name) {
        return new Quarto(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, Integer, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
