/*
 * This file is generated by jOOQ.
 */
package br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables;


import br.com.itarocha.chb.adapter.out.persistence.jooq.data.DefaultSchema;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Indexes;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Keys;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.HospedeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Hospede extends TableImpl<HospedeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>hospede</code>
     */
    public static final Hospede HOSPEDE = new Hospede();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HospedeRecord> getRecordType() {
        return HospedeRecord.class;
    }

    /**
     * The column <code>hospede.id</code>.
     */
    public final TableField<HospedeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>hospede.hospedagem_id</code>.
     */
    public final TableField<HospedeRecord, Long> HOSPEDAGEM_ID = createField(DSL.name("hospedagem_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>hospede.pessoa_id</code>.
     */
    public final TableField<HospedeRecord, Long> PESSOA_ID = createField(DSL.name("pessoa_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>hospede.tipo_hospede_id</code>.
     */
    public final TableField<HospedeRecord, Long> TIPO_HOSPEDE_ID = createField(DSL.name("tipo_hospede_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>hospede.baixado</code>.
     */
    public final TableField<HospedeRecord, String> BAIXADO = createField(DSL.name("baixado"), SQLDataType.VARCHAR(1).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>hospede.created_at</code>.
     */
    public final TableField<HospedeRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>hospede.updated_at</code>.
     */
    public final TableField<HospedeRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>hospede.created_by</code>.
     */
    public final TableField<HospedeRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>hospede.updated_by</code>.
     */
    public final TableField<HospedeRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    private Hospede(Name alias, Table<HospedeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Hospede(Name alias, Table<HospedeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>hospede</code> table reference
     */
    public Hospede(String alias) {
        this(DSL.name(alias), HOSPEDE);
    }

    /**
     * Create an aliased <code>hospede</code> table reference
     */
    public Hospede(Name alias) {
        this(alias, HOSPEDE);
    }

    /**
     * Create a <code>hospede</code> table reference
     */
    public Hospede() {
        this(DSL.name("hospede"), null);
    }

    public <O extends Record> Hospede(Table<O> child, ForeignKey<O, HospedeRecord> key) {
        super(child, key, HOSPEDE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HOSPEDE_HOSPEDE_IDX01, Indexes.HOSPEDE_HOSPEDE_IDX02, Indexes.HOSPEDE_HOSPEDE_IDX03);
    }

    @Override
    public Identity<HospedeRecord, Long> getIdentity() {
        return (Identity<HospedeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<HospedeRecord> getPrimaryKey() {
        return Keys.KEY_HOSPEDE_PRIMARY;
    }

    @Override
    public List<ForeignKey<HospedeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HOSPEDE_FK01, Keys.HOSPEDE_FK02, Keys.HOSPEDE_FK03);
    }

    private transient Hospedagem _hospedagem;
    private transient Pessoa _pessoa;
    private transient TipoHospede _tipoHospede;

    public Hospedagem hospedagem() {
        if (_hospedagem == null)
            _hospedagem = new Hospedagem(this, Keys.HOSPEDE_FK01);

        return _hospedagem;
    }

    public Pessoa pessoa() {
        if (_pessoa == null)
            _pessoa = new Pessoa(this, Keys.HOSPEDE_FK02);

        return _pessoa;
    }

    public TipoHospede tipoHospede() {
        if (_tipoHospede == null)
            _tipoHospede = new TipoHospede(this, Keys.HOSPEDE_FK03);

        return _tipoHospede;
    }

    @Override
    public Hospede as(String alias) {
        return new Hospede(DSL.name(alias), this);
    }

    @Override
    public Hospede as(Name alias) {
        return new Hospede(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Hospede rename(String name) {
        return new Hospede(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hospede rename(Name name) {
        return new Hospede(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, Long, String, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
