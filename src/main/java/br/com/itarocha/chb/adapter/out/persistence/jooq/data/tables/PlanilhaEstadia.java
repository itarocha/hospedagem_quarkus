/*
 * This file is generated by jOOQ.
 */
package br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables;


import br.com.itarocha.chb.adapter.out.persistence.jooq.data.DefaultSchema;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Keys;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.PlanilhaEstadiaRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlanilhaEstadia extends TableImpl<PlanilhaEstadiaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>planilha_estadia</code>
     */
    public static final PlanilhaEstadia PLANILHA_ESTADIA = new PlanilhaEstadia();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanilhaEstadiaRecord> getRecordType() {
        return PlanilhaEstadiaRecord.class;
    }

    /**
     * The column <code>planilha_estadia.id</code>.
     */
    public final TableField<PlanilhaEstadiaRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>planilha_estadia.codigo</code>.
     */
    public final TableField<PlanilhaEstadiaRecord, String> CODIGO = createField(DSL.name("codigo"), SQLDataType.VARCHAR(16).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_estadia.cpf</code>.
     */
    public final TableField<PlanilhaEstadiaRecord, String> CPF = createField(DSL.name("cpf"), SQLDataType.VARCHAR(16).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_estadia.dataEntrada</code>.
     */
    public final TableField<PlanilhaEstadiaRecord, LocalDate> DATAENTRADA = createField(DSL.name("dataEntrada"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>planilha_estadia.dataExpectativaSaida</code>.
     */
    public final TableField<PlanilhaEstadiaRecord, LocalDate> DATAEXPECTATIVASAIDA = createField(DSL.name("dataExpectativaSaida"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>planilha_estadia.dataSaida</code>.
     */
    public final TableField<PlanilhaEstadiaRecord, LocalDate> DATASAIDA = createField(DSL.name("dataSaida"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>planilha_estadia.observacoes</code>.
     */
    public final TableField<PlanilhaEstadiaRecord, String> OBSERVACOES = createField(DSL.name("observacoes"), SQLDataType.CLOB.defaultValue(DSL.field("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>planilha_estadia.data_entrada</code>.
     */
    public final TableField<PlanilhaEstadiaRecord, LocalDate> DATA_ENTRADA = createField(DSL.name("data_entrada"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>planilha_estadia.data_expectativa_saida</code>.
     */
    public final TableField<PlanilhaEstadiaRecord, LocalDate> DATA_EXPECTATIVA_SAIDA = createField(DSL.name("data_expectativa_saida"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>planilha_estadia.data_saida</code>.
     */
    public final TableField<PlanilhaEstadiaRecord, LocalDate> DATA_SAIDA = createField(DSL.name("data_saida"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    private PlanilhaEstadia(Name alias, Table<PlanilhaEstadiaRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlanilhaEstadia(Name alias, Table<PlanilhaEstadiaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>planilha_estadia</code> table reference
     */
    public PlanilhaEstadia(String alias) {
        this(DSL.name(alias), PLANILHA_ESTADIA);
    }

    /**
     * Create an aliased <code>planilha_estadia</code> table reference
     */
    public PlanilhaEstadia(Name alias) {
        this(alias, PLANILHA_ESTADIA);
    }

    /**
     * Create a <code>planilha_estadia</code> table reference
     */
    public PlanilhaEstadia() {
        this(DSL.name("planilha_estadia"), null);
    }

    public <O extends Record> PlanilhaEstadia(Table<O> child, ForeignKey<O, PlanilhaEstadiaRecord> key) {
        super(child, key, PLANILHA_ESTADIA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PlanilhaEstadiaRecord, Long> getIdentity() {
        return (Identity<PlanilhaEstadiaRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlanilhaEstadiaRecord> getPrimaryKey() {
        return Keys.KEY_PLANILHA_ESTADIA_PRIMARY;
    }

    @Override
    public PlanilhaEstadia as(String alias) {
        return new PlanilhaEstadia(DSL.name(alias), this);
    }

    @Override
    public PlanilhaEstadia as(Name alias) {
        return new PlanilhaEstadia(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanilhaEstadia rename(String name) {
        return new PlanilhaEstadia(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanilhaEstadia rename(Name name) {
        return new PlanilhaEstadia(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, LocalDate, LocalDate, LocalDate, String, LocalDate, LocalDate, LocalDate> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
