/*
 * This file is generated by jOOQ.
 */
package br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables;


import br.com.itarocha.chb.adapter.out.persistence.jooq.data.DefaultSchema;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Keys;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.DestinacaoHospedagemRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DestinacaoHospedagem extends TableImpl<DestinacaoHospedagemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>destinacao_hospedagem</code>
     */
    public static final DestinacaoHospedagem DESTINACAO_HOSPEDAGEM = new DestinacaoHospedagem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DestinacaoHospedagemRecord> getRecordType() {
        return DestinacaoHospedagemRecord.class;
    }

    /**
     * The column <code>destinacao_hospedagem.id</code>.
     */
    public final TableField<DestinacaoHospedagemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>destinacao_hospedagem.descricao</code>.
     */
    public final TableField<DestinacaoHospedagemRecord, String> DESCRICAO = createField(DSL.name("descricao"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>destinacao_hospedagem.created_at</code>.
     */
    public final TableField<DestinacaoHospedagemRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>destinacao_hospedagem.updated_at</code>.
     */
    public final TableField<DestinacaoHospedagemRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>destinacao_hospedagem.created_by</code>.
     */
    public final TableField<DestinacaoHospedagemRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>destinacao_hospedagem.updated_by</code>.
     */
    public final TableField<DestinacaoHospedagemRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    private DestinacaoHospedagem(Name alias, Table<DestinacaoHospedagemRecord> aliased) {
        this(alias, aliased, null);
    }

    private DestinacaoHospedagem(Name alias, Table<DestinacaoHospedagemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>destinacao_hospedagem</code> table reference
     */
    public DestinacaoHospedagem(String alias) {
        this(DSL.name(alias), DESTINACAO_HOSPEDAGEM);
    }

    /**
     * Create an aliased <code>destinacao_hospedagem</code> table reference
     */
    public DestinacaoHospedagem(Name alias) {
        this(alias, DESTINACAO_HOSPEDAGEM);
    }

    /**
     * Create a <code>destinacao_hospedagem</code> table reference
     */
    public DestinacaoHospedagem() {
        this(DSL.name("destinacao_hospedagem"), null);
    }

    public <O extends Record> DestinacaoHospedagem(Table<O> child, ForeignKey<O, DestinacaoHospedagemRecord> key) {
        super(child, key, DESTINACAO_HOSPEDAGEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<DestinacaoHospedagemRecord, Long> getIdentity() {
        return (Identity<DestinacaoHospedagemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DestinacaoHospedagemRecord> getPrimaryKey() {
        return Keys.KEY_DESTINACAO_HOSPEDAGEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<DestinacaoHospedagemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DESTINACAO_HOSPEDAGEM_DESTINACAO_HOSPEDAGEM_UN01);
    }

    @Override
    public DestinacaoHospedagem as(String alias) {
        return new DestinacaoHospedagem(DSL.name(alias), this);
    }

    @Override
    public DestinacaoHospedagem as(Name alias) {
        return new DestinacaoHospedagem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DestinacaoHospedagem rename(String name) {
        return new DestinacaoHospedagem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DestinacaoHospedagem rename(Name name) {
        return new DestinacaoHospedagem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
