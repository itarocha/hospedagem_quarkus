/*
 * This file is generated by jOOQ.
 */
package br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables;


import br.com.itarocha.chb.adapter.out.persistence.jooq.data.DefaultSchema;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Keys;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.HospedagemMockRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HospedagemMock extends TableImpl<HospedagemMockRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>hospedagem_mock</code>
     */
    public static final HospedagemMock HOSPEDAGEM_MOCK = new HospedagemMock();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HospedagemMockRecord> getRecordType() {
        return HospedagemMockRecord.class;
    }

    /**
     * The column <code>hospedagem_mock.id</code>.
     */
    public final TableField<HospedagemMockRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>hospedagem_mock.data_efetiva_saida</code>.
     */
    public final TableField<HospedagemMockRecord, LocalDate> DATA_EFETIVA_SAIDA = createField(DSL.name("data_efetiva_saida"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>hospedagem_mock.data_entrada</code>.
     */
    public final TableField<HospedagemMockRecord, LocalDate> DATA_ENTRADA = createField(DSL.name("data_entrada"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>hospedagem_mock.data_prevista_saida</code>.
     */
    public final TableField<HospedagemMockRecord, LocalDate> DATA_PREVISTA_SAIDA = createField(DSL.name("data_prevista_saida"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>hospedagem_mock.quarto</code>.
     */
    public final TableField<HospedagemMockRecord, Integer> QUARTO = createField(DSL.name("quarto"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>hospedagem_mock.situacao</code>.
     */
    public final TableField<HospedagemMockRecord, String> SITUACAO = createField(DSL.name("situacao"), SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * The column <code>hospedagem_mock.dataEfetivaSaida</code>.
     */
    public final TableField<HospedagemMockRecord, LocalDate> DATAEFETIVASAIDA = createField(DSL.name("dataEfetivaSaida"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>hospedagem_mock.dataEntrada</code>.
     */
    public final TableField<HospedagemMockRecord, LocalDate> DATAENTRADA = createField(DSL.name("dataEntrada"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>hospedagem_mock.dataPrevistaSaida</code>.
     */
    public final TableField<HospedagemMockRecord, LocalDate> DATAPREVISTASAIDA = createField(DSL.name("dataPrevistaSaida"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    private HospedagemMock(Name alias, Table<HospedagemMockRecord> aliased) {
        this(alias, aliased, null);
    }

    private HospedagemMock(Name alias, Table<HospedagemMockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>hospedagem_mock</code> table reference
     */
    public HospedagemMock(String alias) {
        this(DSL.name(alias), HOSPEDAGEM_MOCK);
    }

    /**
     * Create an aliased <code>hospedagem_mock</code> table reference
     */
    public HospedagemMock(Name alias) {
        this(alias, HOSPEDAGEM_MOCK);
    }

    /**
     * Create a <code>hospedagem_mock</code> table reference
     */
    public HospedagemMock() {
        this(DSL.name("hospedagem_mock"), null);
    }

    public <O extends Record> HospedagemMock(Table<O> child, ForeignKey<O, HospedagemMockRecord> key) {
        super(child, key, HOSPEDAGEM_MOCK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<HospedagemMockRecord, Long> getIdentity() {
        return (Identity<HospedagemMockRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<HospedagemMockRecord> getPrimaryKey() {
        return Keys.KEY_HOSPEDAGEM_MOCK_PRIMARY;
    }

    @Override
    public HospedagemMock as(String alias) {
        return new HospedagemMock(DSL.name(alias), this);
    }

    @Override
    public HospedagemMock as(Name alias) {
        return new HospedagemMock(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HospedagemMock rename(String name) {
        return new HospedagemMock(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HospedagemMock rename(Name name) {
        return new HospedagemMock(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, LocalDate, LocalDate, LocalDate, Integer, String, LocalDate, LocalDate, LocalDate> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
