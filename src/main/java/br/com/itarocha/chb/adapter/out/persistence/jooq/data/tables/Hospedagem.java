/*
 * This file is generated by jOOQ.
 */
package br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables;


import br.com.itarocha.chb.adapter.out.persistence.jooq.data.DefaultSchema;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Indexes;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Keys;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.HospedagemRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Hospedagem extends TableImpl<HospedagemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>hospedagem</code>
     */
    public static final Hospedagem HOSPEDAGEM = new Hospedagem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HospedagemRecord> getRecordType() {
        return HospedagemRecord.class;
    }

    /**
     * The column <code>hospedagem.id</code>.
     */
    public final TableField<HospedagemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>hospedagem.data_efetiva_saida</code>.
     */
    public final TableField<HospedagemRecord, LocalDate> DATA_EFETIVA_SAIDA = createField(DSL.name("data_efetiva_saida"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>hospedagem.data_entrada</code>.
     */
    public final TableField<HospedagemRecord, LocalDate> DATA_ENTRADA = createField(DSL.name("data_entrada"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>hospedagem.data_prevista_saida</code>.
     */
    public final TableField<HospedagemRecord, LocalDate> DATA_PREVISTA_SAIDA = createField(DSL.name("data_prevista_saida"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>hospedagem.observacoes</code>.
     */
    public final TableField<HospedagemRecord, String> OBSERVACOES = createField(DSL.name("observacoes"), SQLDataType.CLOB.defaultValue(DSL.field("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>hospedagem.tipo_utilizacao</code>.
     */
    public final TableField<HospedagemRecord, String> TIPO_UTILIZACAO = createField(DSL.name("tipo_utilizacao"), SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * The column <code>hospedagem.destinacao_hospedagem_id</code>.
     */
    public final TableField<HospedagemRecord, Long> DESTINACAO_HOSPEDAGEM_ID = createField(DSL.name("destinacao_hospedagem_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>hospedagem.encaminhador_id</code>.
     */
    public final TableField<HospedagemRecord, Long> ENCAMINHADOR_ID = createField(DSL.name("encaminhador_id"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>hospedagem.entidade_id</code>.
     */
    public final TableField<HospedagemRecord, Long> ENTIDADE_ID = createField(DSL.name("entidade_id"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>hospedagem.created_at</code>.
     */
    public final TableField<HospedagemRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>hospedagem.updated_at</code>.
     */
    public final TableField<HospedagemRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>hospedagem.created_by</code>.
     */
    public final TableField<HospedagemRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>hospedagem.updated_by</code>.
     */
    public final TableField<HospedagemRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    private Hospedagem(Name alias, Table<HospedagemRecord> aliased) {
        this(alias, aliased, null);
    }

    private Hospedagem(Name alias, Table<HospedagemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>hospedagem</code> table reference
     */
    public Hospedagem(String alias) {
        this(DSL.name(alias), HOSPEDAGEM);
    }

    /**
     * Create an aliased <code>hospedagem</code> table reference
     */
    public Hospedagem(Name alias) {
        this(alias, HOSPEDAGEM);
    }

    /**
     * Create a <code>hospedagem</code> table reference
     */
    public Hospedagem() {
        this(DSL.name("hospedagem"), null);
    }

    public <O extends Record> Hospedagem(Table<O> child, ForeignKey<O, HospedagemRecord> key) {
        super(child, key, HOSPEDAGEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HOSPEDAGEM_HOSPEDAGEM_IDX01, Indexes.HOSPEDAGEM_HOSPEDAGEM_IDX02, Indexes.HOSPEDAGEM_HOSPEDAGEM_IDX03, Indexes.HOSPEDAGEM_HOSPEDAGEM_IDX04, Indexes.HOSPEDAGEM_HOSPEDAGEM_IDX05);
    }

    @Override
    public Identity<HospedagemRecord, Long> getIdentity() {
        return (Identity<HospedagemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<HospedagemRecord> getPrimaryKey() {
        return Keys.KEY_HOSPEDAGEM_PRIMARY;
    }

    @Override
    public List<ForeignKey<HospedagemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HOSPEDAGEM_FK02, Keys.HOSPEDAGEM_FK01, Keys.HOSPEDAGEM_FK03);
    }

    private transient DestinacaoHospedagem _destinacaoHospedagem;
    private transient Encaminhador _encaminhador;
    private transient Entidade _entidade;

    public DestinacaoHospedagem destinacaoHospedagem() {
        if (_destinacaoHospedagem == null)
            _destinacaoHospedagem = new DestinacaoHospedagem(this, Keys.HOSPEDAGEM_FK02);

        return _destinacaoHospedagem;
    }

    public Encaminhador encaminhador() {
        if (_encaminhador == null)
            _encaminhador = new Encaminhador(this, Keys.HOSPEDAGEM_FK01);

        return _encaminhador;
    }

    public Entidade entidade() {
        if (_entidade == null)
            _entidade = new Entidade(this, Keys.HOSPEDAGEM_FK03);

        return _entidade;
    }

    @Override
    public Hospedagem as(String alias) {
        return new Hospedagem(DSL.name(alias), this);
    }

    @Override
    public Hospedagem as(Name alias) {
        return new Hospedagem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Hospedagem rename(String name) {
        return new Hospedagem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hospedagem rename(Name name) {
        return new Hospedagem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, LocalDate, LocalDate, LocalDate, String, String, Long, Long, Long, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
