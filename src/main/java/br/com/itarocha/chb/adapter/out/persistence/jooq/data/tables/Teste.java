/*
 * This file is generated by jOOQ.
 */
package br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables;


import br.com.itarocha.chb.adapter.out.persistence.jooq.data.DefaultSchema;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.TesteRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Teste extends TableImpl<TesteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>teste</code>
     */
    public static final Teste TESTE = new Teste();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TesteRecord> getRecordType() {
        return TesteRecord.class;
    }

    /**
     * The column <code>teste.id</code>.
     */
    public final TableField<TesteRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>teste.nome</code>.
     */
    public final TableField<TesteRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private Teste(Name alias, Table<TesteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Teste(Name alias, Table<TesteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>teste</code> table reference
     */
    public Teste(String alias) {
        this(DSL.name(alias), TESTE);
    }

    /**
     * Create an aliased <code>teste</code> table reference
     */
    public Teste(Name alias) {
        this(alias, TESTE);
    }

    /**
     * Create a <code>teste</code> table reference
     */
    public Teste() {
        this(DSL.name("teste"), null);
    }

    public <O extends Record> Teste(Table<O> child, ForeignKey<O, TesteRecord> key) {
        super(child, key, TESTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Teste as(String alias) {
        return new Teste(DSL.name(alias), this);
    }

    @Override
    public Teste as(Name alias) {
        return new Teste(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Teste rename(String name) {
        return new Teste(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teste rename(Name name) {
        return new Teste(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
