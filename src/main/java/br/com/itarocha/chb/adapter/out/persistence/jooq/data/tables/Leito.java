/*
 * This file is generated by jOOQ.
 */
package br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables;


import br.com.itarocha.chb.adapter.out.persistence.jooq.data.DefaultSchema;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Keys;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.LeitoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Leito extends TableImpl<LeitoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>leito</code>
     */
    public static final Leito LEITO = new Leito();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LeitoRecord> getRecordType() {
        return LeitoRecord.class;
    }

    /**
     * The column <code>leito.id</code>.
     */
    public final TableField<LeitoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>leito.numero</code>.
     */
    public final TableField<LeitoRecord, Integer> NUMERO = createField(DSL.name("numero"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>leito.quarto_id</code>.
     */
    public final TableField<LeitoRecord, Long> QUARTO_ID = createField(DSL.name("quarto_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>leito.situacao_leito_id</code>.
     */
    public final TableField<LeitoRecord, Long> SITUACAO_LEITO_ID = createField(DSL.name("situacao_leito_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>leito.tipo_leito_id</code>.
     */
    public final TableField<LeitoRecord, Long> TIPO_LEITO_ID = createField(DSL.name("tipo_leito_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>leito.created_at</code>.
     */
    public final TableField<LeitoRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>leito.updated_at</code>.
     */
    public final TableField<LeitoRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>leito.created_by</code>.
     */
    public final TableField<LeitoRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>leito.updated_by</code>.
     */
    public final TableField<LeitoRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    private Leito(Name alias, Table<LeitoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Leito(Name alias, Table<LeitoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>leito</code> table reference
     */
    public Leito(String alias) {
        this(DSL.name(alias), LEITO);
    }

    /**
     * Create an aliased <code>leito</code> table reference
     */
    public Leito(Name alias) {
        this(alias, LEITO);
    }

    /**
     * Create a <code>leito</code> table reference
     */
    public Leito() {
        this(DSL.name("leito"), null);
    }

    public <O extends Record> Leito(Table<O> child, ForeignKey<O, LeitoRecord> key) {
        super(child, key, LEITO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<LeitoRecord, Long> getIdentity() {
        return (Identity<LeitoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LeitoRecord> getPrimaryKey() {
        return Keys.KEY_LEITO_PRIMARY;
    }

    @Override
    public List<UniqueKey<LeitoRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_LEITO_LEITO_UN01);
    }

    @Override
    public List<ForeignKey<LeitoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LEITO_FK03, Keys.LEITO_FK02, Keys.LEITO_FK01);
    }

    private transient Quarto _quarto;
    private transient EstadoLeito _estadoLeito;
    private transient TipoLeito _tipoLeito;

    public Quarto quarto() {
        if (_quarto == null)
            _quarto = new Quarto(this, Keys.LEITO_FK03);

        return _quarto;
    }

    public EstadoLeito estadoLeito() {
        if (_estadoLeito == null)
            _estadoLeito = new EstadoLeito(this, Keys.LEITO_FK02);

        return _estadoLeito;
    }

    public TipoLeito tipoLeito() {
        if (_tipoLeito == null)
            _tipoLeito = new TipoLeito(this, Keys.LEITO_FK01);

        return _tipoLeito;
    }

    @Override
    public Leito as(String alias) {
        return new Leito(DSL.name(alias), this);
    }

    @Override
    public Leito as(Name alias) {
        return new Leito(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Leito rename(String name) {
        return new Leito(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Leito rename(Name name) {
        return new Leito(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, Long, Long, Long, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
