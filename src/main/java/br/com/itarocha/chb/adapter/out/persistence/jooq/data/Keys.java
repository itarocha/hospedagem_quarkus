/*
 * This file is generated by jOOQ.
 */
package br.com.itarocha.chb.adapter.out.persistence.jooq.data;


import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.DestinacaoHospedagem;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.Encaminhador;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.Endereco;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.Entidade;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.EstadoLeito;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.Hospedagem;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.HospedagemMock;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.HospedagemTipoServico;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.Hospede;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.HospedeLeito;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.Leito;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.Pessoa;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.PlanilhaEstadia;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.PlanilhaPaciente;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.Quarto;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.QuartoDestinacoes;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.Roles;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.TipoHospede;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.TipoLeito;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.TipoServico;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.UserRoles;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.Users;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.DestinacaoHospedagemRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.EncaminhadorRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.EnderecoRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.EntidadeRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.EstadoLeitoRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.HospedagemMockRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.HospedagemRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.HospedagemTipoServicoRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.HospedeLeitoRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.HospedeRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.LeitoRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.PessoaRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.PlanilhaEstadiaRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.PlanilhaPacienteRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.QuartoDestinacoesRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.QuartoRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.RolesRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.TipoHospedeRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.TipoLeitoRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.TipoServicoRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.UserRolesRecord;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DestinacaoHospedagemRecord> KEY_DESTINACAO_HOSPEDAGEM_DESTINACAO_HOSPEDAGEM_UN01 = Internal.createUniqueKey(DestinacaoHospedagem.DESTINACAO_HOSPEDAGEM, DSL.name("KEY_destinacao_hospedagem_destinacao_hospedagem_un01"), new TableField[] { DestinacaoHospedagem.DESTINACAO_HOSPEDAGEM.DESCRICAO }, true);
    public static final UniqueKey<DestinacaoHospedagemRecord> KEY_DESTINACAO_HOSPEDAGEM_PRIMARY = Internal.createUniqueKey(DestinacaoHospedagem.DESTINACAO_HOSPEDAGEM, DSL.name("KEY_destinacao_hospedagem_PRIMARY"), new TableField[] { DestinacaoHospedagem.DESTINACAO_HOSPEDAGEM.ID }, true);
    public static final UniqueKey<EncaminhadorRecord> KEY_ENCAMINHADOR_PRIMARY = Internal.createUniqueKey(Encaminhador.ENCAMINHADOR, DSL.name("KEY_encaminhador_PRIMARY"), new TableField[] { Encaminhador.ENCAMINHADOR.ID }, true);
    public static final UniqueKey<EnderecoRecord> KEY_ENDERECO_PRIMARY = Internal.createUniqueKey(Endereco.ENDERECO, DSL.name("KEY_endereco_PRIMARY"), new TableField[] { Endereco.ENDERECO.ID }, true);
    public static final UniqueKey<EntidadeRecord> KEY_ENTIDADE_PRIMARY = Internal.createUniqueKey(Entidade.ENTIDADE, DSL.name("KEY_entidade_PRIMARY"), new TableField[] { Entidade.ENTIDADE.ID }, true);
    public static final UniqueKey<EstadoLeitoRecord> KEY_ESTADO_LEITO_PRIMARY = Internal.createUniqueKey(EstadoLeito.ESTADO_LEITO, DSL.name("KEY_estado_leito_PRIMARY"), new TableField[] { EstadoLeito.ESTADO_LEITO.ID }, true);
    public static final UniqueKey<HospedagemRecord> KEY_HOSPEDAGEM_PRIMARY = Internal.createUniqueKey(Hospedagem.HOSPEDAGEM, DSL.name("KEY_hospedagem_PRIMARY"), new TableField[] { Hospedagem.HOSPEDAGEM.ID }, true);
    public static final UniqueKey<HospedagemMockRecord> KEY_HOSPEDAGEM_MOCK_PRIMARY = Internal.createUniqueKey(HospedagemMock.HOSPEDAGEM_MOCK, DSL.name("KEY_hospedagem_mock_PRIMARY"), new TableField[] { HospedagemMock.HOSPEDAGEM_MOCK.ID }, true);
    public static final UniqueKey<HospedagemTipoServicoRecord> KEY_HOSPEDAGEM_TIPO_SERVICO_PRIMARY = Internal.createUniqueKey(HospedagemTipoServico.HOSPEDAGEM_TIPO_SERVICO, DSL.name("KEY_hospedagem_tipo_servico_PRIMARY"), new TableField[] { HospedagemTipoServico.HOSPEDAGEM_TIPO_SERVICO.ID }, true);
    public static final UniqueKey<HospedeRecord> KEY_HOSPEDE_PRIMARY = Internal.createUniqueKey(Hospede.HOSPEDE, DSL.name("KEY_hospede_PRIMARY"), new TableField[] { Hospede.HOSPEDE.ID }, true);
    public static final UniqueKey<HospedeLeitoRecord> KEY_HOSPEDE_LEITO_PRIMARY = Internal.createUniqueKey(HospedeLeito.HOSPEDE_LEITO, DSL.name("KEY_hospede_leito_PRIMARY"), new TableField[] { HospedeLeito.HOSPEDE_LEITO.ID }, true);
    public static final UniqueKey<LeitoRecord> KEY_LEITO_LEITO_UN01 = Internal.createUniqueKey(Leito.LEITO, DSL.name("KEY_leito_leito_un01"), new TableField[] { Leito.LEITO.QUARTO_ID, Leito.LEITO.NUMERO }, true);
    public static final UniqueKey<LeitoRecord> KEY_LEITO_PRIMARY = Internal.createUniqueKey(Leito.LEITO, DSL.name("KEY_leito_PRIMARY"), new TableField[] { Leito.LEITO.ID }, true);
    public static final UniqueKey<PessoaRecord> KEY_PESSOA_PRIMARY = Internal.createUniqueKey(Pessoa.PESSOA, DSL.name("KEY_pessoa_PRIMARY"), new TableField[] { Pessoa.PESSOA.ID }, true);
    public static final UniqueKey<PlanilhaEstadiaRecord> KEY_PLANILHA_ESTADIA_PRIMARY = Internal.createUniqueKey(PlanilhaEstadia.PLANILHA_ESTADIA, DSL.name("KEY_planilha_estadia_PRIMARY"), new TableField[] { PlanilhaEstadia.PLANILHA_ESTADIA.ID }, true);
    public static final UniqueKey<PlanilhaPacienteRecord> KEY_PLANILHA_PACIENTE_PRIMARY = Internal.createUniqueKey(PlanilhaPaciente.PLANILHA_PACIENTE, DSL.name("KEY_planilha_paciente_PRIMARY"), new TableField[] { PlanilhaPaciente.PLANILHA_PACIENTE.ID }, true);
    public static final UniqueKey<QuartoRecord> KEY_QUARTO_PRIMARY = Internal.createUniqueKey(Quarto.QUARTO, DSL.name("KEY_quarto_PRIMARY"), new TableField[] { Quarto.QUARTO.ID }, true);
    public static final UniqueKey<QuartoRecord> KEY_QUARTO_QUARTO_UN01 = Internal.createUniqueKey(Quarto.QUARTO, DSL.name("KEY_quarto_quarto_un01"), new TableField[] { Quarto.QUARTO.NUMERO }, true);
    public static final UniqueKey<QuartoRecord> KEY_QUARTO_QUARTO_UN02 = Internal.createUniqueKey(Quarto.QUARTO, DSL.name("KEY_quarto_quarto_un02"), new TableField[] { Quarto.QUARTO.DESCRICAO }, true);
    public static final UniqueKey<QuartoDestinacoesRecord> KEY_QUARTO_DESTINACOES_PRIMARY = Internal.createUniqueKey(QuartoDestinacoes.QUARTO_DESTINACOES, DSL.name("KEY_quarto_destinacoes_PRIMARY"), new TableField[] { QuartoDestinacoes.QUARTO_DESTINACOES.QUARTO_ID, QuartoDestinacoes.QUARTO_DESTINACOES.DESTINACAO_HOSPEDAGEM_ID }, true);
    public static final UniqueKey<RolesRecord> KEY_ROLES_PRIMARY = Internal.createUniqueKey(Roles.ROLES, DSL.name("KEY_roles_PRIMARY"), new TableField[] { Roles.ROLES.ID }, true);
    public static final UniqueKey<RolesRecord> KEY_ROLES_UK_NB4H0P6TXRMFC0XBRD1KGLP9T = Internal.createUniqueKey(Roles.ROLES, DSL.name("KEY_roles_UK_nb4h0p6txrmfc0xbrd1kglp9t"), new TableField[] { Roles.ROLES.NAME }, true);
    public static final UniqueKey<TipoHospedeRecord> KEY_TIPO_HOSPEDE_PRIMARY = Internal.createUniqueKey(TipoHospede.TIPO_HOSPEDE, DSL.name("KEY_tipo_hospede_PRIMARY"), new TableField[] { TipoHospede.TIPO_HOSPEDE.ID }, true);
    public static final UniqueKey<TipoHospedeRecord> KEY_TIPO_HOSPEDE_TIPO_HOSPEDE_UN01 = Internal.createUniqueKey(TipoHospede.TIPO_HOSPEDE, DSL.name("KEY_tipo_hospede_tipo_hospede_un01"), new TableField[] { TipoHospede.TIPO_HOSPEDE.DESCRICAO }, true);
    public static final UniqueKey<TipoLeitoRecord> KEY_TIPO_LEITO_PRIMARY = Internal.createUniqueKey(TipoLeito.TIPO_LEITO, DSL.name("KEY_tipo_leito_PRIMARY"), new TableField[] { TipoLeito.TIPO_LEITO.ID }, true);
    public static final UniqueKey<TipoLeitoRecord> KEY_TIPO_LEITO_TIPO_LEITO_UN01 = Internal.createUniqueKey(TipoLeito.TIPO_LEITO, DSL.name("KEY_tipo_leito_tipo_leito_un01"), new TableField[] { TipoLeito.TIPO_LEITO.DESCRICAO }, true);
    public static final UniqueKey<TipoServicoRecord> KEY_TIPO_SERVICO_PRIMARY = Internal.createUniqueKey(TipoServico.TIPO_SERVICO, DSL.name("KEY_tipo_servico_PRIMARY"), new TableField[] { TipoServico.TIPO_SERVICO.ID }, true);
    public static final UniqueKey<TipoServicoRecord> KEY_TIPO_SERVICO_TIPO_SERVICO_UN01 = Internal.createUniqueKey(TipoServico.TIPO_SERVICO, DSL.name("KEY_tipo_servico_tipo_servico_un01"), new TableField[] { TipoServico.TIPO_SERVICO.DESCRICAO }, true);
    public static final UniqueKey<UserRolesRecord> KEY_USER_ROLES_PRIMARY = Internal.createUniqueKey(UserRoles.USER_ROLES, DSL.name("KEY_user_roles_PRIMARY"), new TableField[] { UserRoles.USER_ROLES.USER_ID, UserRoles.USER_ROLES.ROLE_ID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_UK6DOTKOTT2KJSP8VW4D0M25FB7 = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_UK6dotkott2kjsp8vw4d0m25fb7"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_UKR43AF9AP4EDM43MMTQ01ODDJ6 = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_UKr43af9ap4edm43mmtq01oddj6"), new TableField[] { Users.USERS.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<EncaminhadorRecord, EntidadeRecord> FKA7SRJLJ6TXLUVYXIOGY43K2NT = Internal.createForeignKey(Encaminhador.ENCAMINHADOR, DSL.name("FKa7srjlj6txluvyxiogy43k2nt"), new TableField[] { Encaminhador.ENCAMINHADOR.ENTIDADE_ID }, Keys.KEY_ENTIDADE_PRIMARY, new TableField[] { Entidade.ENTIDADE.ID }, true);
    public static final ForeignKey<EntidadeRecord, EnderecoRecord> FKTKQSBYBF0X0MYGX1PS6CMC37W = Internal.createForeignKey(Entidade.ENTIDADE, DSL.name("FKtkqsbybf0x0mygx1ps6cmc37w"), new TableField[] { Entidade.ENTIDADE.ENDERECO_ID }, Keys.KEY_ENDERECO_PRIMARY, new TableField[] { Endereco.ENDERECO.ID }, true);
    public static final ForeignKey<HospedagemRecord, EncaminhadorRecord> HOSPEDAGEM_FK01 = Internal.createForeignKey(Hospedagem.HOSPEDAGEM, DSL.name("hospedagem_fk01"), new TableField[] { Hospedagem.HOSPEDAGEM.ENCAMINHADOR_ID }, Keys.KEY_ENCAMINHADOR_PRIMARY, new TableField[] { Encaminhador.ENCAMINHADOR.ID }, true);
    public static final ForeignKey<HospedagemRecord, DestinacaoHospedagemRecord> HOSPEDAGEM_FK02 = Internal.createForeignKey(Hospedagem.HOSPEDAGEM, DSL.name("hospedagem_fk02"), new TableField[] { Hospedagem.HOSPEDAGEM.DESTINACAO_HOSPEDAGEM_ID }, Keys.KEY_DESTINACAO_HOSPEDAGEM_PRIMARY, new TableField[] { DestinacaoHospedagem.DESTINACAO_HOSPEDAGEM.ID }, true);
    public static final ForeignKey<HospedagemRecord, EntidadeRecord> HOSPEDAGEM_FK03 = Internal.createForeignKey(Hospedagem.HOSPEDAGEM, DSL.name("hospedagem_fk03"), new TableField[] { Hospedagem.HOSPEDAGEM.ENTIDADE_ID }, Keys.KEY_ENTIDADE_PRIMARY, new TableField[] { Entidade.ENTIDADE.ID }, true);
    public static final ForeignKey<HospedagemTipoServicoRecord, HospedagemRecord> HOSPEDAGEM_TIPO_SERVICO_FK01 = Internal.createForeignKey(HospedagemTipoServico.HOSPEDAGEM_TIPO_SERVICO, DSL.name("hospedagem_tipo_servico_fk01"), new TableField[] { HospedagemTipoServico.HOSPEDAGEM_TIPO_SERVICO.HOSPEDAGEM_ID }, Keys.KEY_HOSPEDAGEM_PRIMARY, new TableField[] { Hospedagem.HOSPEDAGEM.ID }, true);
    public static final ForeignKey<HospedagemTipoServicoRecord, TipoServicoRecord> HOSPEDAGEM_TIPO_SERVICO_SERVICO_FK02 = Internal.createForeignKey(HospedagemTipoServico.HOSPEDAGEM_TIPO_SERVICO, DSL.name("hospedagem_tipo_servico_servico_fk02"), new TableField[] { HospedagemTipoServico.HOSPEDAGEM_TIPO_SERVICO.TIPO_SERVICO_ID }, Keys.KEY_TIPO_SERVICO_PRIMARY, new TableField[] { TipoServico.TIPO_SERVICO.ID }, true);
    public static final ForeignKey<HospedeRecord, HospedagemRecord> HOSPEDE_FK01 = Internal.createForeignKey(Hospede.HOSPEDE, DSL.name("hospede_fk01"), new TableField[] { Hospede.HOSPEDE.HOSPEDAGEM_ID }, Keys.KEY_HOSPEDAGEM_PRIMARY, new TableField[] { Hospedagem.HOSPEDAGEM.ID }, true);
    public static final ForeignKey<HospedeRecord, PessoaRecord> HOSPEDE_FK02 = Internal.createForeignKey(Hospede.HOSPEDE, DSL.name("hospede_fk02"), new TableField[] { Hospede.HOSPEDE.PESSOA_ID }, Keys.KEY_PESSOA_PRIMARY, new TableField[] { Pessoa.PESSOA.ID }, true);
    public static final ForeignKey<HospedeRecord, TipoHospedeRecord> HOSPEDE_FK03 = Internal.createForeignKey(Hospede.HOSPEDE, DSL.name("hospede_fk03"), new TableField[] { Hospede.HOSPEDE.TIPO_HOSPEDE_ID }, Keys.KEY_TIPO_HOSPEDE_PRIMARY, new TableField[] { TipoHospede.TIPO_HOSPEDE.ID }, true);
    public static final ForeignKey<HospedeLeitoRecord, QuartoRecord> FK4SQUTFBKQO7AVEVYX8F98TKUY = Internal.createForeignKey(HospedeLeito.HOSPEDE_LEITO, DSL.name("FK4squtfbkqo7avevyx8f98tkuy"), new TableField[] { HospedeLeito.HOSPEDE_LEITO.QUARTO_ID }, Keys.KEY_QUARTO_PRIMARY, new TableField[] { Quarto.QUARTO.ID }, true);
    public static final ForeignKey<HospedeLeitoRecord, LeitoRecord> FKMV2DXRYDC0L7H5OMHXVSY60GH = Internal.createForeignKey(HospedeLeito.HOSPEDE_LEITO, DSL.name("FKmv2dxrydc0l7h5omhxvsy60gh"), new TableField[] { HospedeLeito.HOSPEDE_LEITO.LEITO_ID }, Keys.KEY_LEITO_PRIMARY, new TableField[] { Leito.LEITO.ID }, true);
    public static final ForeignKey<HospedeLeitoRecord, HospedeRecord> HOSPEDE_LEITO_HOSPEDE_FK = Internal.createForeignKey(HospedeLeito.HOSPEDE_LEITO, DSL.name("hospede_leito_hospede_FK"), new TableField[] { HospedeLeito.HOSPEDE_LEITO.HOSPEDE_ID }, Keys.KEY_HOSPEDE_PRIMARY, new TableField[] { Hospede.HOSPEDE.ID }, true);
    public static final ForeignKey<LeitoRecord, TipoLeitoRecord> LEITO_FK01 = Internal.createForeignKey(Leito.LEITO, DSL.name("leito_fk01"), new TableField[] { Leito.LEITO.TIPO_LEITO_ID }, Keys.KEY_TIPO_LEITO_PRIMARY, new TableField[] { TipoLeito.TIPO_LEITO.ID }, true);
    public static final ForeignKey<LeitoRecord, EstadoLeitoRecord> LEITO_FK02 = Internal.createForeignKey(Leito.LEITO, DSL.name("leito_fk02"), new TableField[] { Leito.LEITO.SITUACAO_LEITO_ID }, Keys.KEY_ESTADO_LEITO_PRIMARY, new TableField[] { EstadoLeito.ESTADO_LEITO.ID }, true);
    public static final ForeignKey<LeitoRecord, QuartoRecord> LEITO_FK03 = Internal.createForeignKey(Leito.LEITO, DSL.name("leito_fk03"), new TableField[] { Leito.LEITO.QUARTO_ID }, Keys.KEY_QUARTO_PRIMARY, new TableField[] { Quarto.QUARTO.ID }, true);
    public static final ForeignKey<PessoaRecord, EnderecoRecord> FKEI4ABNSW085KX27J89RP796NY = Internal.createForeignKey(Pessoa.PESSOA, DSL.name("FKei4abnsw085kx27j89rp796ny"), new TableField[] { Pessoa.PESSOA.ENDERECO_ID }, Keys.KEY_ENDERECO_PRIMARY, new TableField[] { Endereco.ENDERECO.ID }, true);
    public static final ForeignKey<QuartoDestinacoesRecord, QuartoRecord> FK3VSG76TGHPFN2ELXPJOGDGKSV = Internal.createForeignKey(QuartoDestinacoes.QUARTO_DESTINACOES, DSL.name("FK3vsg76tghpfn2elxpjogdgksv"), new TableField[] { QuartoDestinacoes.QUARTO_DESTINACOES.QUARTO_ID }, Keys.KEY_QUARTO_PRIMARY, new TableField[] { Quarto.QUARTO.ID }, true);
    public static final ForeignKey<QuartoDestinacoesRecord, DestinacaoHospedagemRecord> FKH8JUP3N5F9KH454RDC9MYD4R = Internal.createForeignKey(QuartoDestinacoes.QUARTO_DESTINACOES, DSL.name("FKh8jup3n5f9kh454rdc9myd4r"), new TableField[] { QuartoDestinacoes.QUARTO_DESTINACOES.DESTINACAO_HOSPEDAGEM_ID }, Keys.KEY_DESTINACAO_HOSPEDAGEM_PRIMARY, new TableField[] { DestinacaoHospedagem.DESTINACAO_HOSPEDAGEM.ID }, true);
    public static final ForeignKey<UserRolesRecord, RolesRecord> FKH8CIRAMU9CC9Q3QCQIV4UE8A6 = Internal.createForeignKey(UserRoles.USER_ROLES, DSL.name("FKh8ciramu9cc9q3qcqiv4ue8a6"), new TableField[] { UserRoles.USER_ROLES.ROLE_ID }, Keys.KEY_ROLES_PRIMARY, new TableField[] { Roles.ROLES.ID }, true);
    public static final ForeignKey<UserRolesRecord, UsersRecord> FKHFH9DX7W3UBF1CO1VDEV94G3F = Internal.createForeignKey(UserRoles.USER_ROLES, DSL.name("FKhfh9dx7w3ubf1co1vdev94g3f"), new TableField[] { UserRoles.USER_ROLES.USER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
}
