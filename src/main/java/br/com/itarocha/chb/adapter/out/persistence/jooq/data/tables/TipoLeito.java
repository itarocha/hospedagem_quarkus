/*
 * This file is generated by jOOQ.
 */
package br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables;


import br.com.itarocha.chb.adapter.out.persistence.jooq.data.DefaultSchema;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Keys;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.TipoLeitoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TipoLeito extends TableImpl<TipoLeitoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tipo_leito</code>
     */
    public static final TipoLeito TIPO_LEITO = new TipoLeito();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TipoLeitoRecord> getRecordType() {
        return TipoLeitoRecord.class;
    }

    /**
     * The column <code>tipo_leito.id</code>.
     */
    public final TableField<TipoLeitoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>tipo_leito.descricao</code>.
     */
    public final TableField<TipoLeitoRecord, String> DESCRICAO = createField(DSL.name("descricao"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>tipo_leito.quantidade_camas</code>.
     */
    public final TableField<TipoLeitoRecord, Integer> QUANTIDADE_CAMAS = createField(DSL.name("quantidade_camas"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tipo_leito.created_at</code>.
     */
    public final TableField<TipoLeitoRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>tipo_leito.updated_at</code>.
     */
    public final TableField<TipoLeitoRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>tipo_leito.created_by</code>.
     */
    public final TableField<TipoLeitoRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>tipo_leito.updated_by</code>.
     */
    public final TableField<TipoLeitoRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    private TipoLeito(Name alias, Table<TipoLeitoRecord> aliased) {
        this(alias, aliased, null);
    }

    private TipoLeito(Name alias, Table<TipoLeitoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tipo_leito</code> table reference
     */
    public TipoLeito(String alias) {
        this(DSL.name(alias), TIPO_LEITO);
    }

    /**
     * Create an aliased <code>tipo_leito</code> table reference
     */
    public TipoLeito(Name alias) {
        this(alias, TIPO_LEITO);
    }

    /**
     * Create a <code>tipo_leito</code> table reference
     */
    public TipoLeito() {
        this(DSL.name("tipo_leito"), null);
    }

    public <O extends Record> TipoLeito(Table<O> child, ForeignKey<O, TipoLeitoRecord> key) {
        super(child, key, TIPO_LEITO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TipoLeitoRecord, Long> getIdentity() {
        return (Identity<TipoLeitoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TipoLeitoRecord> getPrimaryKey() {
        return Keys.KEY_TIPO_LEITO_PRIMARY;
    }

    @Override
    public List<UniqueKey<TipoLeitoRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TIPO_LEITO_TIPO_LEITO_UN01);
    }

    @Override
    public TipoLeito as(String alias) {
        return new TipoLeito(DSL.name(alias), this);
    }

    @Override
    public TipoLeito as(Name alias) {
        return new TipoLeito(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TipoLeito rename(String name) {
        return new TipoLeito(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TipoLeito rename(Name name) {
        return new TipoLeito(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Integer, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
