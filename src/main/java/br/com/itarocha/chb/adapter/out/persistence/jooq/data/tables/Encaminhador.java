/*
 * This file is generated by jOOQ.
 */
package br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables;


import br.com.itarocha.chb.adapter.out.persistence.jooq.data.DefaultSchema;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Keys;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.EncaminhadorRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Encaminhador extends TableImpl<EncaminhadorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>encaminhador</code>
     */
    public static final Encaminhador ENCAMINHADOR = new Encaminhador();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EncaminhadorRecord> getRecordType() {
        return EncaminhadorRecord.class;
    }

    /**
     * The column <code>encaminhador.id</code>.
     */
    public final TableField<EncaminhadorRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>encaminhador.cargo</code>.
     */
    public final TableField<EncaminhadorRecord, String> CARGO = createField(DSL.name("cargo"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>encaminhador.email</code>.
     */
    public final TableField<EncaminhadorRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>encaminhador.nome</code>.
     */
    public final TableField<EncaminhadorRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>encaminhador.telefone</code>.
     */
    public final TableField<EncaminhadorRecord, String> TELEFONE = createField(DSL.name("telefone"), SQLDataType.VARCHAR(16).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>encaminhador.entidade_id</code>.
     */
    public final TableField<EncaminhadorRecord, Long> ENTIDADE_ID = createField(DSL.name("entidade_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>encaminhador.created_at</code>.
     */
    public final TableField<EncaminhadorRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>encaminhador.updated_at</code>.
     */
    public final TableField<EncaminhadorRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>encaminhador.created_by</code>.
     */
    public final TableField<EncaminhadorRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>encaminhador.updated_by</code>.
     */
    public final TableField<EncaminhadorRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>encaminhador.ativo</code>.
     */
    public final TableField<EncaminhadorRecord, String> ATIVO = createField(DSL.name("ativo"), SQLDataType.VARCHAR(1).nullable(false), this, "");

    private Encaminhador(Name alias, Table<EncaminhadorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Encaminhador(Name alias, Table<EncaminhadorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>encaminhador</code> table reference
     */
    public Encaminhador(String alias) {
        this(DSL.name(alias), ENCAMINHADOR);
    }

    /**
     * Create an aliased <code>encaminhador</code> table reference
     */
    public Encaminhador(Name alias) {
        this(alias, ENCAMINHADOR);
    }

    /**
     * Create a <code>encaminhador</code> table reference
     */
    public Encaminhador() {
        this(DSL.name("encaminhador"), null);
    }

    public <O extends Record> Encaminhador(Table<O> child, ForeignKey<O, EncaminhadorRecord> key) {
        super(child, key, ENCAMINHADOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<EncaminhadorRecord, Long> getIdentity() {
        return (Identity<EncaminhadorRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EncaminhadorRecord> getPrimaryKey() {
        return Keys.KEY_ENCAMINHADOR_PRIMARY;
    }

    @Override
    public List<ForeignKey<EncaminhadorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKA7SRJLJ6TXLUVYXIOGY43K2NT);
    }

    private transient Entidade _entidade;

    public Entidade entidade() {
        if (_entidade == null)
            _entidade = new Entidade(this, Keys.FKA7SRJLJ6TXLUVYXIOGY43K2NT);

        return _entidade;
    }

    @Override
    public Encaminhador as(String alias) {
        return new Encaminhador(DSL.name(alias), this);
    }

    @Override
    public Encaminhador as(Name alias) {
        return new Encaminhador(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Encaminhador rename(String name) {
        return new Encaminhador(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Encaminhador rename(Name name) {
        return new Encaminhador(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, String, String, Long, LocalDateTime, LocalDateTime, Long, Long, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
