/*
 * This file is generated by jOOQ.
 */
package br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables;


import br.com.itarocha.chb.adapter.out.persistence.jooq.data.DefaultSchema;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Indexes;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Keys;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.HospedagemTipoServicoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HospedagemTipoServico extends TableImpl<HospedagemTipoServicoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>hospedagem_tipo_servico</code>
     */
    public static final HospedagemTipoServico HOSPEDAGEM_TIPO_SERVICO = new HospedagemTipoServico();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HospedagemTipoServicoRecord> getRecordType() {
        return HospedagemTipoServicoRecord.class;
    }

    /**
     * The column <code>hospedagem_tipo_servico.id</code>.
     */
    public final TableField<HospedagemTipoServicoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>hospedagem_tipo_servico.hospedagem_id</code>.
     */
    public final TableField<HospedagemTipoServicoRecord, Long> HOSPEDAGEM_ID = createField(DSL.name("hospedagem_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>hospedagem_tipo_servico.tipo_servico_id</code>.
     */
    public final TableField<HospedagemTipoServicoRecord, Long> TIPO_SERVICO_ID = createField(DSL.name("tipo_servico_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>hospedagem_tipo_servico.created_at</code>.
     */
    public final TableField<HospedagemTipoServicoRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>hospedagem_tipo_servico.updated_at</code>.
     */
    public final TableField<HospedagemTipoServicoRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>hospedagem_tipo_servico.created_by</code>.
     */
    public final TableField<HospedagemTipoServicoRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>hospedagem_tipo_servico.updated_by</code>.
     */
    public final TableField<HospedagemTipoServicoRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    private HospedagemTipoServico(Name alias, Table<HospedagemTipoServicoRecord> aliased) {
        this(alias, aliased, null);
    }

    private HospedagemTipoServico(Name alias, Table<HospedagemTipoServicoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>hospedagem_tipo_servico</code> table reference
     */
    public HospedagemTipoServico(String alias) {
        this(DSL.name(alias), HOSPEDAGEM_TIPO_SERVICO);
    }

    /**
     * Create an aliased <code>hospedagem_tipo_servico</code> table reference
     */
    public HospedagemTipoServico(Name alias) {
        this(alias, HOSPEDAGEM_TIPO_SERVICO);
    }

    /**
     * Create a <code>hospedagem_tipo_servico</code> table reference
     */
    public HospedagemTipoServico() {
        this(DSL.name("hospedagem_tipo_servico"), null);
    }

    public <O extends Record> HospedagemTipoServico(Table<O> child, ForeignKey<O, HospedagemTipoServicoRecord> key) {
        super(child, key, HOSPEDAGEM_TIPO_SERVICO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HOSPEDAGEM_TIPO_SERVICO_HOSPEDAGEM_TIPO_SERVICO_IDX01, Indexes.HOSPEDAGEM_TIPO_SERVICO_HOSPEDAGEM_TIPO_SERVICO_SERVICO_FK02_IDX);
    }

    @Override
    public Identity<HospedagemTipoServicoRecord, Long> getIdentity() {
        return (Identity<HospedagemTipoServicoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<HospedagemTipoServicoRecord> getPrimaryKey() {
        return Keys.KEY_HOSPEDAGEM_TIPO_SERVICO_PRIMARY;
    }

    @Override
    public List<ForeignKey<HospedagemTipoServicoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HOSPEDAGEM_TIPO_SERVICO_FK01, Keys.HOSPEDAGEM_TIPO_SERVICO_SERVICO_FK02);
    }

    private transient Hospedagem _hospedagem;
    private transient TipoServico _tipoServico;

    public Hospedagem hospedagem() {
        if (_hospedagem == null)
            _hospedagem = new Hospedagem(this, Keys.HOSPEDAGEM_TIPO_SERVICO_FK01);

        return _hospedagem;
    }

    public TipoServico tipoServico() {
        if (_tipoServico == null)
            _tipoServico = new TipoServico(this, Keys.HOSPEDAGEM_TIPO_SERVICO_SERVICO_FK02);

        return _tipoServico;
    }

    @Override
    public HospedagemTipoServico as(String alias) {
        return new HospedagemTipoServico(DSL.name(alias), this);
    }

    @Override
    public HospedagemTipoServico as(Name alias) {
        return new HospedagemTipoServico(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HospedagemTipoServico rename(String name) {
        return new HospedagemTipoServico(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HospedagemTipoServico rename(Name name) {
        return new HospedagemTipoServico(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
