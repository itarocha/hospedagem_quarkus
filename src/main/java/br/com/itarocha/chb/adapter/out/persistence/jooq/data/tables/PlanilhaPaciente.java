/*
 * This file is generated by jOOQ.
 */
package br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables;


import br.com.itarocha.chb.adapter.out.persistence.jooq.data.DefaultSchema;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.Keys;
import br.com.itarocha.chb.adapter.out.persistence.jooq.data.tables.records.PlanilhaPacienteRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlanilhaPaciente extends TableImpl<PlanilhaPacienteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>planilha_paciente</code>
     */
    public static final PlanilhaPaciente PLANILHA_PACIENTE = new PlanilhaPaciente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanilhaPacienteRecord> getRecordType() {
        return PlanilhaPacienteRecord.class;
    }

    /**
     * The column <code>planilha_paciente.id</code>.
     */
    public final TableField<PlanilhaPacienteRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>planilha_paciente.bairro</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> BAIRRO = createField(DSL.name("bairro"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.cep</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> CEP = createField(DSL.name("cep"), SQLDataType.VARCHAR(16).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.cidade</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> CIDADE = createField(DSL.name("cidade"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.codigo</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> CODIGO = createField(DSL.name("codigo"), SQLDataType.VARCHAR(16).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.cpf</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> CPF = createField(DSL.name("cpf"), SQLDataType.VARCHAR(16).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.dataCadastro</code>.
     */
    public final TableField<PlanilhaPacienteRecord, LocalDate> DATACADASTRO = createField(DSL.name("dataCadastro"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>planilha_paciente.dataNascimento</code>.
     */
    public final TableField<PlanilhaPacienteRecord, LocalDate> DATANASCIMENTO = createField(DSL.name("dataNascimento"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>planilha_paciente.endereco</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> ENDERECO = createField(DSL.name("endereco"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.estadoCivil</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> ESTADOCIVIL = createField(DSL.name("estadoCivil"), SQLDataType.VARCHAR(32).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.nacionalidade</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> NACIONALIDADE = createField(DSL.name("nacionalidade"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.naturalidade</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> NATURALIDADE = createField(DSL.name("naturalidade"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.nome</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.numero</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> NUMERO = createField(DSL.name("numero"), SQLDataType.VARCHAR(16).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.profissao</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> PROFISSAO = createField(DSL.name("profissao"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.rg</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> RG = createField(DSL.name("rg"), SQLDataType.VARCHAR(32).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.sobrenome</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> SOBRENOME = createField(DSL.name("sobrenome"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.telefone</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> TELEFONE = createField(DSL.name("telefone"), SQLDataType.VARCHAR(32).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.telefone2</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> TELEFONE2 = createField(DSL.name("telefone2"), SQLDataType.VARCHAR(32).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.uf</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> UF = createField(DSL.name("uf"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>planilha_paciente.data_cadastro</code>.
     */
    public final TableField<PlanilhaPacienteRecord, LocalDate> DATA_CADASTRO = createField(DSL.name("data_cadastro"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>planilha_paciente.data_nascimento</code>.
     */
    public final TableField<PlanilhaPacienteRecord, LocalDate> DATA_NASCIMENTO = createField(DSL.name("data_nascimento"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>planilha_paciente.estado_civil</code>.
     */
    public final TableField<PlanilhaPacienteRecord, String> ESTADO_CIVIL = createField(DSL.name("estado_civil"), SQLDataType.VARCHAR(32).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private PlanilhaPaciente(Name alias, Table<PlanilhaPacienteRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlanilhaPaciente(Name alias, Table<PlanilhaPacienteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>planilha_paciente</code> table reference
     */
    public PlanilhaPaciente(String alias) {
        this(DSL.name(alias), PLANILHA_PACIENTE);
    }

    /**
     * Create an aliased <code>planilha_paciente</code> table reference
     */
    public PlanilhaPaciente(Name alias) {
        this(alias, PLANILHA_PACIENTE);
    }

    /**
     * Create a <code>planilha_paciente</code> table reference
     */
    public PlanilhaPaciente() {
        this(DSL.name("planilha_paciente"), null);
    }

    public <O extends Record> PlanilhaPaciente(Table<O> child, ForeignKey<O, PlanilhaPacienteRecord> key) {
        super(child, key, PLANILHA_PACIENTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PlanilhaPacienteRecord, Long> getIdentity() {
        return (Identity<PlanilhaPacienteRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlanilhaPacienteRecord> getPrimaryKey() {
        return Keys.KEY_PLANILHA_PACIENTE_PRIMARY;
    }

    @Override
    public PlanilhaPaciente as(String alias) {
        return new PlanilhaPaciente(DSL.name(alias), this);
    }

    @Override
    public PlanilhaPaciente as(Name alias) {
        return new PlanilhaPaciente(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanilhaPaciente rename(String name) {
        return new PlanilhaPaciente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanilhaPaciente rename(Name name) {
        return new PlanilhaPaciente(name, null);
    }
}
